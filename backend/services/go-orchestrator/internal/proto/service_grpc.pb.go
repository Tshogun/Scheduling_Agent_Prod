// -----------------------------------------------------------------------------
// orchestrator.proto
//
// This Protocol Buffers definition describes the gRPC API for the AI Orchestrator
// service, which handles:
//
//   1. Health checks (`Ping`)
//   2. LLM-based text generation/completion (`GetCompletion`)
//   3. Optimization problem solving using OR-Tools (`SolveOptimization`)
//   4. Asynchronous job status tracking (`GetJobStatus`)
//
// The service is designed to integrate components like:
//   - Large Language Models (e.g., GPT, Claude)
//   - Mathematical optimization engines (e.g., Google OR-Tools)
//   - Asynchronous workers (e.g., via RabbitMQ)
//
// Messages are structured as requests and responses for each RPC endpoint.
// Optimization results are processed asynchronously and identified by a `job_id`.
//
// This file is used to generate gRPC clients and servers in multiple languages
// (e.g., Go, Python, Node.js) and facilitates communication between frontend,
// backend, and worker services in a distributed AI system.
//
// Generated code can be used for:
//   - Backend service (Go/Python) implementing the business logic
//   - Frontend/microservices making requests to the orchestrator
//
// For Go projects, the generated code will be placed in the
// "https://github.com/Tshogun/Scheduling_Agent_Prod/shared/proto" package.
// -----------------------------------------------------------------------------

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AIService_Ping_FullMethodName              = "/orchestrator.AIService/Ping"
	AIService_GetCompletion_FullMethodName     = "/orchestrator.AIService/GetCompletion"
	AIService_SolveOptimization_FullMethodName = "/orchestrator.AIService/SolveOptimization"
	AIService_GetJobStatus_FullMethodName      = "/orchestrator.AIService/GetJobStatus"
)

// AIServiceClient is the client API for AIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AI Service for LLM and OR-Tools operations
type AIServiceClient interface {
	// Simple ping for health check
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// LLM completion
	GetCompletion(ctx context.Context, in *CompletionRequest, opts ...grpc.CallOption) (*CompletionResponse, error)
	// OR-Tools solver (async via RabbitMQ recommended)
	SolveOptimization(ctx context.Context, in *OptimizationRequest, opts ...grpc.CallOption) (*OptimizationResponse, error)
	// Get solver job status
	GetJobStatus(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error)
}

type aIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIServiceClient(cc grpc.ClientConnInterface) AIServiceClient {
	return &aIServiceClient{cc}
}

func (c *aIServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, AIService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) GetCompletion(ctx context.Context, in *CompletionRequest, opts ...grpc.CallOption) (*CompletionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompletionResponse)
	err := c.cc.Invoke(ctx, AIService_GetCompletion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) SolveOptimization(ctx context.Context, in *OptimizationRequest, opts ...grpc.CallOption) (*OptimizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptimizationResponse)
	err := c.cc.Invoke(ctx, AIService_SolveOptimization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) GetJobStatus(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobStatusResponse)
	err := c.cc.Invoke(ctx, AIService_GetJobStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIServiceServer is the server API for AIService service.
// All implementations must embed UnimplementedAIServiceServer
// for forward compatibility.
//
// AI Service for LLM and OR-Tools operations
type AIServiceServer interface {
	// Simple ping for health check
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// LLM completion
	GetCompletion(context.Context, *CompletionRequest) (*CompletionResponse, error)
	// OR-Tools solver (async via RabbitMQ recommended)
	SolveOptimization(context.Context, *OptimizationRequest) (*OptimizationResponse, error)
	// Get solver job status
	GetJobStatus(context.Context, *JobStatusRequest) (*JobStatusResponse, error)
	mustEmbedUnimplementedAIServiceServer()
}

// UnimplementedAIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIServiceServer struct{}

func (UnimplementedAIServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAIServiceServer) GetCompletion(context.Context, *CompletionRequest) (*CompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompletion not implemented")
}
func (UnimplementedAIServiceServer) SolveOptimization(context.Context, *OptimizationRequest) (*OptimizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolveOptimization not implemented")
}
func (UnimplementedAIServiceServer) GetJobStatus(context.Context, *JobStatusRequest) (*JobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatus not implemented")
}
func (UnimplementedAIServiceServer) mustEmbedUnimplementedAIServiceServer() {}
func (UnimplementedAIServiceServer) testEmbeddedByValue()                   {}

// UnsafeAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIServiceServer will
// result in compilation errors.
type UnsafeAIServiceServer interface {
	mustEmbedUnimplementedAIServiceServer()
}

func RegisterAIServiceServer(s grpc.ServiceRegistrar, srv AIServiceServer) {
	// If the following call pancis, it indicates UnimplementedAIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIService_ServiceDesc, srv)
}

func _AIService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_GetCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GetCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GetCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GetCompletion(ctx, req.(*CompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_SolveOptimization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptimizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).SolveOptimization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_SolveOptimization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).SolveOptimization(ctx, req.(*OptimizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GetJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GetJobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GetJobStatus(ctx, req.(*JobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIService_ServiceDesc is the grpc.ServiceDesc for AIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orchestrator.AIService",
	HandlerType: (*AIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AIService_Ping_Handler,
		},
		{
			MethodName: "GetCompletion",
			Handler:    _AIService_GetCompletion_Handler,
		},
		{
			MethodName: "SolveOptimization",
			Handler:    _AIService_SolveOptimization_Handler,
		},
		{
			MethodName: "GetJobStatus",
			Handler:    _AIService_GetJobStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
